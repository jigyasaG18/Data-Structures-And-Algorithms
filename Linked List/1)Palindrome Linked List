Palindrome Linked List
Given a singly linked list of integers. The task is to check if the given linked list is palindrome or not.

Examples:

Input: LinkedList: 1->2->1->1->2->1
Output: true
Explanation: The given linked list is 1->2->1->1->2->1 , which is a palindrome and Hence, the output is true.

Input: LinkedList: 1->2->3->4
Output: false
Explanation: The given linked list is 1->2->3->4, which is not a palindrome and Hence, the output is false.

Constraints:
1 <= number of nodes <= 105
1 ≤ node->data ≤ 103

class Solution {
  public:
    // Function to check whether the list is palindrome.
    Node* reverse(Node* head){
        Node* temp=head;
        Node* prev=NULL;
        while(temp!=NULL){
            Node* front=temp->next;
            temp->next=prev;
            prev=temp;
            temp=front;
        }
        return prev;
    }
    bool isPalindrome(Node *head) {
        // Your code here
        Node* slow=head;
        Node* fast=head;
        while(fast->next!=NULL && fast->next->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        Node* newhead=reverse(slow->next);
        Node* first=head;
        Node* second=newhead;
        while(second!=NULL){
            if(first->data!=second->data){
                reverse(newhead);
                return false;
            }
            
            first=first->next;
            second=second->next;
        }
        reverse(newhead);
        return true;
    }
};
